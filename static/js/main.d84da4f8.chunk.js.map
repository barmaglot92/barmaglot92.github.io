{"version":3,"sources":["components/Map/Map.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Map","props","map","loadYmaps","a","ymaps","load","initMap","console","error","message","Constructor","center","zoom","MapWrapper","id","React","Component","styled","div","AppWrapper","App","Boolean","window","location","hostname","match","theme","primer","log","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oZAIO,IAAMA,EAAb,YAGI,WAAYC,GAAY,IAAD,8BACnB,4CAAMA,KAHFC,SAEe,IAMfC,UANe,sBAMH,4BAAAC,EAAA,+EAEMC,IAAMC,KACpB,0FAHQ,OAENJ,EAFM,OAMZ,EAAKK,QAAQL,EAAIF,KANL,gDAQZQ,QAAQC,MAAM,KAAIC,SARN,yDANG,EAkBfH,QAAU,SAACI,GACf,EAAKT,IAAM,IAAIS,EAAY,MAAO,CAK9BC,OAAQ,CAAC,MAAO,OAGhBC,KAAM,KAxBV,EAAKV,YAHc,EAH3B,sEAmCQ,OAAO,kBAACW,EAAD,CAAYC,GAAG,YAnC9B,GAAyBC,IAAMC,WAuCzBH,EAAaI,IAAOC,IAAV,K,8JCtChB,IAQMC,EAAaF,IAAOC,IAAV,KAODE,EAfH,WACR,OACI,kBAACD,EAAD,KACI,kBAAC,EAAD,QCIQE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCTAC,EAAK,eACJC,KAGPpB,QAAQqB,IAAI,gBAAiBF,GAE7BG,IAASC,OACL,kBAAC,IAAD,CAAeJ,MAAOA,GAClB,kBAAC,EAAD,OAEJK,SAASC,eAAe,SDwHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d84da4f8.chunk.js","sourcesContent":["import React from \"react\"\nimport ymaps from \"ymaps\"\nimport styled from \"styled-components\"\n\nexport class Map extends React.Component {\n    private map: any\n\n    constructor(props: {}) {\n        super(props)\n\n        this.loadYmaps()\n    }\n\n    private loadYmaps = async () => {\n        try {\n            const map = await ymaps.load(\n                \"https://api-maps.yandex.ru/2.1/?apikey=0955f635-90e7-43c4-a522-d06b8a9edc99&lang=ru_RU\"\n            )\n\n            this.initMap(map.Map)\n        } catch (err) {\n            console.error(err.message)\n        }\n    }\n\n    private initMap = (Constructor: any) => {\n        this.map = new Constructor(\"map\", {\n            // Координаты центра карты.\n            // Порядок по умолчанию: «широта, долгота».\n            // Чтобы не определять координаты центра карты вручную,\n            // воспользуйтесь инструментом Определение координат.\n            center: [55.76, 37.64],\n            // Уровень масштабирования. Допустимые значения:\n            // от 0 (весь мир) до 19.\n            zoom: 7,\n        })\n    }\n\n    render() {\n        return <MapWrapper id=\"map\"></MapWrapper>\n    }\n}\n\nconst MapWrapper = styled.div`\n    width: 100vw;\n    height: 100vh;\n`\n","import React from \"react\"\nimport {Map} from \"./components/Map/Map\"\nimport \"./index.css\"\nimport styled from \"styled-components\"\n\nconst App = () => {\n    return (\n        <AppWrapper>\n            <Map />\n        </AppWrapper>\n    )\n}\n\nconst AppWrapper = styled.div`\n    min-height: 100vh;\n    display: flex;\n    flex-direction: column;\n    flex: 1;\n`\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nimport {theme as primer} from \"@primer/components\"\nimport {ThemeProvider} from \"styled-components\"\n\nconst theme = {\n    ...primer,\n}\n\nconsole.log(\"currentTheme:\", theme)\n\nReactDOM.render(\n    <ThemeProvider theme={theme}>\n        <App />\n    </ThemeProvider>,\n    document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}